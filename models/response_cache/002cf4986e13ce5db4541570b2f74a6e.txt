Here is an example Java code solution for the LeetCode Two Sum problem:

```java
import java.util.HashMap;
import java.util.Map;

class Solution {
    public int[] twoSum(int[] nums, int target) {
        // Create a hashmap to store the complement of each element and its index
        Map<Integer, Integer> complementMap = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            
            // If the complement exists in the map, return the indices
            if (complementMap.containsKey(complement)) {
                return new int[] {complementMap.get(complement), i};
            }
            
            // Otherwise, add the current element and its index into the map
            complementMap.put(nums[i], i);
        }
        
        throw new IllegalArgumentException("No two sum solution");
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        
        int[] result = solution.twoSum(nums, target);
        System.out.println("Indices: " + result[0] + ", " + result[1]);
    }
}
```

This code creates a hashmap to store the complement of each element in the `nums` array and its index. It then iterates through the `nums` array, calculates the complement for each element, and checks if the complement exists in the hashmap. If it does, it returns the indices of the two elements that add up to the target. If no two elements sum up to the target, it throws an `IllegalArgumentException`. The `main` method demonstrates how to use the `twoSum` method with a sample input.